@IsTest
public with sharing class MaintenanceRequestHelperTest {
    // implement scheduled code here
    @IsTest
    public static void updateWorkOrdersTest(){
        test.startTest();
        List<Case> caseMainList = CreateTestCases();
        Set<Id> myCaseIds = new Set<Id>();
        // Update the case status to Closed
        for(integer i = 0; i<caseMainList.size(); i++){
            caseMainList[i].Status = 'Closed';
            myCaseIds.add(caseMainList[i].Id);
        }
        update caseMainList;
        test.StopTest();
        system.debug('Case was closed here');
        system.debug('myCaseIds Size: '+myCaseIds.size());
        // Verify whether any new Maintenance request got created for the parent request
        
        List<Case> newCaselist = new List <Case> ([select Id from Case where subject = 'Automated Test Cases 123']);
        
        if(!newCaselist.IsEmpty()){
            List<Equipment_Maintenance_Item__c> epqList= new List <Equipment_Maintenance_Item__c>([select Id, Equipment__c from Equipment_Maintenance_Item__c 
                                                                                                   where Maintenance_Request__c IN : newCaselist]);
            System.debug('Epq Record: '+epqList.size());          
        }
    }
    public static List<Case> CreateTestCases(){
        
        List<Product2> newPrdList = new List <Product2>();
        Product2 newProduct;
        
        List<Case> caseList = new List<Case>();
        Case newCase;
        
        List<Equipment_Maintenance_Item__c> epqRecList = new List<Equipment_Maintenance_Item__c>();
        Equipment_Maintenance_Item__c newEpRec;
        
        for(Integer i=0; i<400;i++){
            newCase = new Case();
            newCase.Origin = 'Web';
            newCase.Date_Reported__c = system.today(); 
            newCase.Comments= 'Created for testing from Test class';
            newCase.Subject = 'Automated Test Cases 123';
            if(i<=200){
                newCase.Status = 'New';
                newCase.Type = 'Repair';
            }else{
                newCase.Status = 'Working';
                newCase.Type = 'Mechanical';
            }
            
            caseList.add(newCase);
        }        
        insert caseList;
        
        system.debug('Cases were created here');
        
        for(Integer y=0; y<10;y++){
            newProduct = new Product2();
            newProduct.Replacement_Part__c = true;
            newProduct.Name = 'Test Product '+y;
            newProduct.Maintenance_Cycle__c = 2+y*5;
            newPrdList.add(newProduct);
        }
        insert newPrdList;
        system.debug('Products were created here');
        
        integer ct=0;
        for(Integer z=0; z<400;z++){
            if(caseList[z].Maintenance_Request__c != null){
                newEpRec = new Equipment_Maintenance_Item__c();
                newEpRec.Maintenance_Request__c = caseList[z].Maintenance_Request__c;
                for(Integer a=0; a<5;a++){
                    ct = ct==10? ct=0: ct;
                    newEpRec.Equipment__c = newPrdList[ct].Id; 
                    ct++;
                }            
                newEpRec.Quantity__c = Integer.valueof((Math.random() * 100));
                epqRecList.add(newEpRec);
            }
        }
        insert epqRecList;
        system.debug('Eqipment Records were created here');
        return caseList;
    }
    
}
